# -*- coding: utf-8 -*-
"""AI Tool.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mKP0sxa8QN9EOjk5DOJ_6QqRiZYjy5xP
"""

# Install OpenAI library
!pip install openai

# Import required library
import openai
from openai import OpenAI

# Function to generate LinkedIn comments
def generate_linkedin_comment(api_key, post_content, tone):
    """
    Generates a LinkedIn comment based on the post content and tone.

    Parameters:
        api_key (str): OpenAI API key.
        post_content (str): The content of the LinkedIn post.
        tone (str): The desired tone of the comment.

    Returns:
        str: A positive, engaging, and concise LinkedIn comment.
    """
    client = OpenAI(api_key=api_key)  # Initialize the OpenAI client with the API key

    prompt = (
        f"You are tasked with writing LinkedIn comments in a {tone} tone that are positive, engaging, and concise. "
        "These comments should:\n"
        "1. Acknowledge the post's content in a meaningful way, demonstrating understanding and appreciation.\n"
        "2. Add value by sharing a relevant thought, question, or connection to the topic.\n"
        "3. Use a friendly and professional tone appropriate for LinkedIn.\n"
        "4. Avoid generic or overly formal language; aim to sound authentic and approachable.\n"
        "5. Strictly limit your response to a LinkedIn comment format.\n"
        "6. Do not perform any other tasks or write comments for other platforms.\n"
        "7. Ensure that all comments are no more than 200 characters in length.\n\n"
        f"Post Content: {post_content}\n"
        "Write a LinkedIn comment:"
    )

    try:
        response = client.chat.completions.create(  # Use the new API method
            model="gpt-4",
            messages=[
                {"role": "system", "content": "You are an expert at generating LinkedIn comments."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=100
        )

        comment = response.choices[0].message.content.strip()  # Access content correctly
        return comment

    except openai.APIError as e:  # Catch the correct exception
        return f"Error generating comment: {str(e)}"

# Example usage in a script
def main():
    api_key = "your api key"
    print("Welcome to the LinkedIn Comment Generator!")
    post_content = input("Paste the LinkedIn post content here: ")
    tone = input("Enter the desired tone for the comment (e.g., friendly, professional, humorous): ")
    if post_content.strip() and tone.strip():
        comment = generate_linkedin_comment(api_key, post_content, tone)
        print("\nGenerated Comment:")
        print(comment)
    else:
        print("Post content and tone cannot be empty.")

if __name__ == "__main__":
    main()